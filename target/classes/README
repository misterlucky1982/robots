Проект написан как тестовое задание.
Задание было таким:

В игровом мире есть роботы. 
Можно добавлять своих роботов, реализовывая интерфейс или базовый класс. 
Роботы получают задания на выполнение из очереди, и делают эти задания. 
Задания посылаются брудкастом или конкретно одному роботу, есть REST API интерфейс.
 Иногда задание может означать - убей себя, тогда робот перестаёт существовать. 
 Существует трекер активности роботов, если он замечает, что кого-то недостаёт (убил себя), 
 или же, что роботы не успевают выполнять задания - он создаёт нового робота нужного типа. 
 Все активности такого игрового мира автоматически, динамически выкладываются 
 на Web UI в виде лога совершенных действий. 
 Также у пользователя есть возможность ввести задание в очередь на этой же странице - 
 конкретному роботу или всем роботам.
В выполнении задания приветствуется креативность. 
Ограничений на библиотеки, фреймворки и подходы нет.

В конкретно этом репозитории - серверная часть приложения.
Проект я решил разбить на три модуля.
Первый: набор интерфейсов - просто прослойка абстракции, посредством которой
серверный процесс общается с игровым процессом.
Этот модуль находится здесь:
https://github.com/misterlucky1982/game_test_proxi

Сам игровой процесс - отдельный проект, где крутятся все роботы.
Этот модуль здесь:
https://github.com/misterlucky1982/game_test_core
Каждый робот - отдельный поток. Доступ к очередям я решил организовать посредством класса Semaphore.
В серверной части приложения (третий модуль - то, что вы сейчас смотрите) аннотацией игровой процесс
был добавлен в бины и Спринг в кнтроллере общается с ним как с обычным бином.


